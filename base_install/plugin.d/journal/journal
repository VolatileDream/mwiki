#!/usr/bin/env bash

# configuration file
CONFIG="$HOME/.config/mwiki-journal-config.ini"

# get conch stuff for config
# available at: https://github.com/VolatileDream/dot-files/blob/master/conch
source "$HOME/bin/conch"

config(){

	if [ ! -e "$CONFIG" -a $# -lt 3 ]; then
		# create ?
		err "Config file doesn't exist."
		return 2
	fi

	if [ $# -eq 0 ]; then
		cat "$CONFIG"
	else
		if [ $# -gt 2 ] ; then
			section="$1" ; shift
			key="$1" ; shift

			ini "$CONFIG" "$section" "$key" "$@"
		else
			# get the value we wanted, and substitute
			# any $HOME value with the environment variable
			VAR="$(ini "$CONFIG" "$@" | sed "s_\${HOME}_${HOME}_" )"
			if [ ! -z "$VAR" ]; then
				conch config "$VAR"
			fi
		fi
	fi
}

err(){
	echo -e "\e[31m" "$@" "\e[0m" >> /dev/stderr
}

_wiki(){
	require-journal

	export MWIKI_PATH="$JOURNAL"
	mwiki "$@"
	unset MWIKI_PATH
}


require-journal(){

	# stuff that should be in configs
	JOURNAL="$(config journal location)" 	# location for mwiki

	# the directory in which our files live, relative to wiki root
	# this depends on implementation details of mwiki
	JOURNAL_FILES="$JOURNAL/plugin.d/journal"

	if [ $? -ne 0 -o -z "$JOURNAL" ]; then
		err "journal hasn't been configured for use yet."
		err "Run: 'journal create' to configure it."
		exit 1
	fi
	# the journal location is a directory
	if [ ! -d "$JOURNAL" ]; then
		err "Unable to locate journal (${JOURNAL})."
		err "Are you sure it exists?"
		exit 1
	fi
}

update(){
	require-journal

	if [ ! -e "$JOURNAL_FILES/last-journal-entry" ]; then
		return 0
	fi

	local today=0

	while [ $# -gt 0 ]; do
		case "$1" in
			--today) today=1 ;;
			*)
				err "Bad argument to journal update"
				return 1
		esac
		shift
	done

	local FORMAT="%Y-%m-%d"

	# last entry date
	local LAST="$(cat "$JOURNAL_FILES/last-journal-date")"
	# current date
	local NOW="$(date +$FORMAT)"

	if [ "$NOW" != "$LAST" ] || [ $today -ne 0 ]; then

		if _wiki entries | grep -E "^$LAST\$" > /dev/null ; then
			echo "An entry already exists for '$LAST'"
			echo " Not updating journal."
			return 1
		fi

		# Check to make sure the user hasn't accidentally run update
		read -p "You have an existing entry for: $LAST, commit it to log? (y/N) "
		if [[ "$REPLY" != "Y" && "$REPLY" != "y" ]]; then
			return 1
		fi

		# Move the entry into position in the wiki
		cat "$JOURNAL_FILES/last-journal-entry" | _wiki edit "$LAST"

		rm "$JOURNAL_FILES/last-journal-entry"
	fi

	return 0
}

edit(){
	require-journal

	if [ $# -gt 0 ]; then

		local entry="$1" ; shift

		_wiki edit "$entry"

	else
		if [ ! -e "$JOURNAL_FILES/last-journal-entry" ]; then
			date "+%Y-%m-%d" > "$JOURNAL_FILES/last-journal-date"
		fi

		# if the user doesn't write to this file, it will remain empty.
		# this is a nice way to ignore empty entries.

    # switch to the mwiki entries to allow the user to easily copy
    # and edit content from the wiki while editing the journal.
    pushd "$JOURNAL/entries" > /dev/null
		sensible-editor "$JOURNAL_FILES/last-journal-entry"
    popd > /dev/null
	fi
}

create(){
	if [ ! -z "$JOURNAL" ]; then
		err "Journal is already set ($JOURNAL)."
		exit 1
	fi

	# the only command that can be run without a journal
	# it bootstraps the rest of the app, and configures
	#  the location of the journal for further use

	echo "Creating a journal..."
	local configured=0
	local file_location=""

	while [ $configured -eq 0 ]; do
		echo "Where should the journal files live?"
		read -p "> " file_location
		echo "Put the journal here: '$file_location'"
		read -p "Is that correct? (y/n) > " confirm
		if [ "$confirm" = "y" -o "$confirm" = "Y" ]; then
			configured=1
		else
			echo "Okay, let's try again."
		fi
	done

	# user entered variables
	# the location, modified to use '${HOME}' instead of ~
	file_location="$(echo $file_location | sed 's_^~/_\${HOME}/_')"
	config journal location "$file_location"

	# update the journal location so we can run update + edit after this
	JOURNAL="$(config journal location)"

	require-journal

	# we don't care about where the MWIKI directory pointer lives, because
	#  we will setup every invocation of mwiki with MWIKI_PATH set. All we
	#  want is that it correctly sets up the wiki where we want it.
	local dir=`mktemp --directory`
	_wiki init "$dir" "$JOURNAL"
	rm -r "$dir"

	mkdir -p "$JOURNAL_FILES"
}

view(){
	require-journal
  _wiki build 1>&2 || exit 1

  local -a ARGS
  local reverse_flag=""
  while [ $# -gt 0 ]; do
    case "$1" in
      --reverse) reverse_flag="--reverse" ;;
      *) ARGS+=("$1") ;;
    esac
    shift
  done

	# all entries must be shown with a single command invocation
	# this prevents the user from having to exit the pager
	# again and again and again, and get really frustrated

	if [ ! -z "${ARGS[*]}" ]; then
    for selector in "${ARGS[@]}" ; do
      _wiki entries $reverse_flag |
        grep -E "^${selector}" |
        while read entry ; do
          cat "$JOURNAL/partial/${entry}.md"
          echo
        done
    done | sensible-pager
	fi
}

query(){
	require-journal

	# Some data pieces of the journal have fancy datastores that can't be access
	# just by browsing the wiki, and must be interacted with in other ways.
	# An example of one such datastore is a search index, which can't really be
	# accessed through the browser (at least, not without javascript).

	local source="$1" ; shift

	# this also depends on mwiki implementation details.
	local executable="$JOURNAL/plugin.d/$source/query"

	# check if the store can be queried
	if [ ! -x "$executable" ]; then
		if [ -e "$executable" ]; then
			err "Can not execute plugin '$source' to query."
		else
			err "Can not find plugin '$source' to query it."
		fi
	else
		cd "$JOURNAL" # setup for the query
		# pass all the arguments along
		"$executable" "$@"
	fi
}

extension(){
	require-journal

	# The first argument is the name of the extension we want to run.
	# This makes it so that extensions can't have whitespace in their names.
	local EXT="$1" ; shift

	local COM="$JOURNAL_FILES/extensions/${EXT}"

	local rval=1

	if [ -e "$COM" -a -x "$COM" ]; then
		rval=0
		"$COM" "$@"
		local exit_status=$?
		if [ $exit_status -ne 0 ]; then
			err "Error running $EXT, non-zero exit status: $exit_status"
			rval=$exit_status
		fi
	fi

	return $rval
}

if [ $# -eq 0 ]; then
	JOURNAL="$(config journal location)"
	if [ -z "$JOURNAL" ]; then
		create
	fi

	# invoke update first
	update
	edit
else
	COMMAND="$1" ; shift
	case $COMMAND in
		build)
			require-journal
			_wiki build "$@"
			;;
		browse)
			require-journal
			_wiki browse "$@"
			;;
		config)
			config "$@" ;;
		create)
			# setup the journal at the beginning
			create ;;
		edit)
			# the only way to edit yesterdays entry
			edit "$@" ;;
		entries)
			require-journal
			_wiki entries "$@" ;;
		query)
			query "$@" ;;
		update)
			# assume we want to push the today entry into the log
			update --today ;;
		view)
			view "$@" ;;
		help|-h|--help)
			echo "Usage: $0 [options] <command>"
			echo "  Update your private journal"
			echo
			echo "Available commands are:"
			echo "- build [--daemon [--auto]]"
			echo "    checks to ensure the wiki is up to date, and updates files if it"
			echo "    is not, accepts mwiki build options."
			echo
			echo "- browse [item]"
			echo "    opens the specified entry in the journal."
			echo
			echo "- config <source> <key> [value]"
			echo "    reads or writes the config for the specified source variable."
			echo "    without arguments it dumps the config"
			echo
			echo "- edit [item]"
			echo "    edit the most recent journal entry (default), or the specific"
			echo "    entry."
			echo
			echo "- entries"
			echo "    lists all the entry dates in the journal"
			echo
			echo "- query <source> query*"
			echo "    query the generated data from the specific source"
			echo
			echo "- update"
			echo "    if the LATEST entry is not for the current date it"
			echo "    updates the LATEST entry to point to the current date then"
			echo "    runs an incremental update of all generated data sources"
			echo
			echo "- view [year[-month[-day[ hour]]]]*"
			echo "    view a particular set of date entries, or range of dates"
			;;
		*)
			if extension "$COMMAND" "$@"; then
				echo -n ; # Nothing...
			else
				err "Journal command '$COMMAND' not found"
				exit 1
			fi
			;;
	esac
fi
