#!/usr/bin/env bash

MWIKI_NAME=".mwiki"

err(){
  echo -e "\e[31m" "$@" "\e[0m" >> /dev/stderr
}

mwiki_root_file() {
  # Searches up the directory structure to find the mwiki root.
  local path="$PWD"

  while [ ! -e "${path}/${MWIKI_NAME}" -a -n "${path}" ]; do
    path="${path%/*}"
  done

  if [ -e "${path}/${MWIKI_NAME}" ]; then
    echo "${path}/${MWIKI_NAME}"
    return 0
  fi

  return 1
}

mwiki_require(){
  # Path already set.
  if [ -n "$MWIKI_PATH" ]; then
    return 0
  fi
  # set the wiki path and look it up at the same time
  local dir=`mwiki_root_file`

  if [ $? -ne 0 ]; then
    err "No mwiki wiki was found."
    err "Run: 'mwiki init' to create one."
    exit 1
  fi

  # this will set MWIKI_PATH to be not the empty string
  source "$dir"

  if [ -z "$MWIKI_PATH" ]; then
    err "Bad mwiki instance: $dir"
    exit 1
  else
    if [ "${MWIKI_PATH:0:1}" != "/" ]; then
      # make path relative to project root
      MWIKI_PATH="${dir%$MWIKI_NAME}${MWIKI_PATH}"
    fi
  fi
}

mwiki_init(){
  if [ $# -lt 1 ]; then
    err "Insufficient arguments to init"
    err "Missing placement directory"
    exit 1
  fi

  local project_dir="$1" ; shift
  # This might be empty, if it is, use "." as here. 
  # to default to $project_dir.
  local mwiki_sub_dir="${1:-.}";

  local MWIKI_CONF="$project_dir/$MWIKI_NAME"

  if [ -f "$MWIKI_CONF" ]; then
    err "Wiki already exists: $MWIKI_CONF"
    return 1
  fi

  # Ensure the project directory exists.
  mkdir -p "${project_dir}/${mwiki_sub_dir}"

  echo "MWIKI_PATH=${mwiki_sub_dir}" > "$MWIKI_CONF"

  local mwiki_git_repo="`dirname $(readlink -f "$0")`"
  if [ -e "${mwiki_git_repo}/base_install" ]; then
    echo "Copying ${mwiki_git_repo}/base_install into ${project_dir}/${mwiki_sub_dir}"
    cp -r "${mwiki_git_repo}/base_install/"* "${project_dir}/${mwiki_sub_dir}"
  else
    echo "Could not find mwiki git repo."
    echo "You will have to install the mwiki base_install into ${MWIKI_PATH} yourself"
    echo " mwiki can be found here: https://github.com/VolatileDream/mwiki/tree/master/base_install"
  fi
}

mwiki_entries(){
  mwiki_require
  local reverse_flag=""
  while [ $# -gt 0 ]; do
    case "$1" in
      --reverse)
        reverse_flag="--reverse" ; shift
        ;;
      *)
        echo "error: unrecognized arg to entries: $1" > /dev/stderr
        exit 1
        ;;
    esac
  done

  pushd "$MWIKI_PATH/entries" > /dev/null
  # (ab)using sort & bash arguments like this is safe, only because
  # we control the contents of the `reverse_flag` variable. It's still
  # not a great thing.
  #
  # when unset (or empty string) no extra arguments get passed to sort.
  # when set, sort sees "--reverse"
  find -iname '*.mw' | sed -e 's_^./__' -e 's_\.mw$__' | sort $reverse_flag
  popd > /dev/null
}

mwiki_build(){
  mwiki_require

  local -a ARGS

  while [ $# -gt 0 ]; do
    case $1 in
      -a|--auto)
        ARGS+=("--autoupdate")
        ARGS+=("--autoparse")
        ;;
      -d|--daemon)
        ARGS+=("monitor")
        ARGS+=("foreground")
        ;;
      # unrecognized arguments are just passed through
      *) ARGS+=("$1") ;;
    esac
    shift
  done

  mwiki_tup "${ARGS[@]}"
}

mwiki_tup(){
  mwiki_require

  # check if tup is running

  local old="$PWD"
  cd "$MWIKI_PATH"
  tup "$@"
  cd "$old"
}

mwiki_edit(){
  mwiki_require
  local entry="$1" ; shift
  local entry_path="$MWIKI_PATH/entries/$entry.mw"

  # we use it as a meta entry later...
  # and no link to it could be created.
  if [ -z "$entry" ]; then
    err "Can't create the empty entry"
    return 1
  fi

    # used for a hack around tup behaviour
  local created=0

  # check if std in is a tty
  if ! tty > /dev/null ; then
    [ -f "$entry_path" ] || created=1
    cat >> "$entry_path"
  else
    if [ ! -f "$entry_path" ]; then
      read -p "'$entry' doesn't exist, create it? (Y/n) "
      if [ "$REPLY" != "n" -a "$REPLY" != "N" ]; then
        touch "$entry_path"
        created=1
      fi
    fi

    if [ ! -f "$entry_path" ]; then
      return 1
    fi

        # This makes it really nice to open other entries while editing.
        pushd "${MWIKI_PATH}/entries/" > /dev/null
        sensible-editor "${entry}.mw"
        popd > /dev/null
    fi

  # this is an ugly hack to deal with tup incorrectly updating #.html
  if [ $created -eq 1 ]; then
    rm "${MWIKI_PATH}/out-html/#.html" "${MWIKI_PATH}/out-html/~"*
  fi

  mwiki_tup
}

mwiki_browse(){
  mwiki_require
  cd "$MWIKI_PATH/out-html/"

  local entry="./#.html"
  if [ $# -gt 0 ]; then
    entry="./$1.html"
  fi

  sensible-browser "$entry"
}

mwiki(){

  if [ $# -lt 1 ]; then
    mwiki_usage
    exit 1
  fi

  local command="$1" ; shift

  case "$command" in
    init) mwiki_init "$@" ;;
    edit) mwiki_edit "$@" ;;
    entries) mwiki_entries "$@" ;;
    browse) mwiki_browse "$@" ;;
    # things for building
    build) mwiki_build "$@" ;;
    *) 
      echo "error: '$command' is not a mwiki command"
      mwiki_usage
      return 1
    ;;
  esac
}

mwiki_usage(){
  echo "mwiki <command> ..."
  echo "  init d [n] - initialize an mwiki with root directory \$d,"
  echo "               store mwiki contents in directory \$n (defaults to \$d)"
  echo "  edit n     - edit the entry called \$n"
  echo "  entries    - list all of the wiki entries"
  echo "  browse n   - open the wiki entry called \$n"
  echo "  build [-d|--daemon [-a|--auto]] - start a build"
  echo "    -d, --daemon - file monitoring daemon, makes builds faste"
  echo "    -a, --auto - make the daemon rebuild on edits"
}

mwiki "$@"
