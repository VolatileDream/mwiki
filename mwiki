#!/usr/bin/env bash

MWIKI_NAME=".mwiki.d"
MWIKI_PATH=""

err(){
	echo -e "\e[31m" "$@" "\e[0m" >> /dev/stderr
}

mwiki_require(){
	# set the wiki path and look it up at the same time
	MWIKI_PATH=`lookup $MWIKI_NAME`

	if [ $? -ne 0 ]; then
		err "No mwiki wiki was found."
		err "Run: 'mwiki init' to create one."
		exit 1
	fi
}

mwiki_init(){
	local dir="."

	if [ $# -gt 0 ]; then
		dir="$1" ; shift
	fi

	if [ -d "$dir/$MWIKI_NAME" ]; then
		err "Wiki already exists: $dir/$MWIKI_NAME"
		return 1
	fi

	# create the directory that we're going to build this wiki into at the
	# same time as we build the wiki itself
	mkdir -p "$dir/$MWIKI_NAME/build"

	mwiki_require

	touch "$MWIKI_PATH/Tupfile.ini"

	cat > "$MWIKI_PATH/Tupfile"  <<- EOF

	!m_build = |> mwiki generate %f %o |> 

	: foreach *.mw |> !m_build |> build/%B.html

	: *.mw |> index++ -e text:* *.mw |> swish++.index

	EOF

}

mwiki_entries(){
	mwiki_require
	cd "$MWIKI_PATH"
	ls | grep '\.mw$' | sed 's/\.mw$//'
}

mwiki_build(){
	mwiki_require
	if [ $# -gt 0 ]; then
		local ARGS=""
		if [ "$2" = "-a" -o "$2" = "--auto" ]; then
			# have tup auto update things on change
			ARGS="--autoupdate --autoparse"
		fi
		if [ "$1" = "-d" -o "$1" = "--daemon" ]; then
			mwiki_tup monitor --foreground $ARGS
		fi
	else
		mwiki_tup
	fi
}

mwiki_tup(){
	mwiki_require

	# check if tup is running

	local old="$PWD"
	cd "$MWIKI_PATH"
	tup "$@"
	cd "$old"
}

mwiki_edit(){
	mwiki_require
	local entry="$1" ; shift
	local entry_path="$MWIKI_PATH/$entry.mw"

	if [ ! -f "$entry_path" ]; then
		read -p "'$entry' doesn't exist, create it? (Y/n) "
		if [ "$REPLY" != "n" -o "$REPLY" != "N" ]; then
			touch "$entry_path"
		fi
	fi

	if [ ! -f "$entry_path" ]; then
		return 1
	fi

	sensible-editor "$entry_path"

	mwiki_tup
}

mwiki_gen(){
	# this function is used to generate any sort of markdown/format file
	# to html output.
	cat "$1" |
	# [#@]			# match a '#' or '@' both are ok
	#     ( [a-zA-Z_0-9]+ )	# capture the part that matters
	sed 's_[#@]\([a-zA-Z_0-9]\+\)_<a href="\1.html">&</a>_' |
	cat > "$2"
}

mwiki_browse(){
	mwiki_require
	cd "$MWIKI_PATH/build/"

	# use w3m
	w3m "./${1}.html"
}

mwiki_search(){
	mwiki_require
	cd "$MWIKI_PATH"

	# use search++
	search++ "$@"
}

mwiki(){

	if [ $# -lt 1 ]; then
		mwiki_usage
		exit 1
	fi

	local command="$1" ; shift

	case "$command" in
		init) mwiki_init "$@" ;;
		edit) mwiki_edit "$@" ;;
		entries) mwiki_entries ;;
		browse) mwiki_browse "$@" ;;
		search) mwiki_search "$@" ;;
		# things for building
		build) mwiki_build "$@" ;;
		generate) mwiki_gen "$@" ;;
		*) 
			echo "error: '$command' is not a mwiki command"
			mwiki_usage
			return 1
		;;
	esac
}

mwiki_usage(){
	echo "mwiki <command> ..."
	echo "  init [d]   - initialize a mwiki instance in the current director or \$d"
	echo "  edit <n>   - edit the entry called \$n"
	echo "  entries    - list all of the wiki entries"
	echo "  browse <n> - open the wiki entry called \$n"
	echo "  search <s> - invoke swish++ to search for \$s"
	echo "  generate <i> <o> - run file generation for \$i and output to \$o"
	echo "  build [-d|--daemon [-a|--auto]] - start a build"
	echo "    -d, --daemon - file monitoring daemon, makes builds faste"
	echo "    -a, --autoupdates - make the daemon rebuild on edits"
}


mwiki "$@"
